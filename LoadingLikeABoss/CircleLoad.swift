//
//  CircleLoad.swift
//  CircleLoad
//
//  Created by Razvigor Andreev on 2/25/16.
//  Copyright (c) 2016 helpMeCodeSwift. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class CircleLoad : NSObject {

    //// Drawing Methods

    public class func drawCanvas1(master master: CGFloat = 0.538) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.091, green: 0.699, blue: 0.292, alpha: 1.000)
        let color2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let color3 = UIColor(red: 0.078, green: 0.420, blue: 1.000, alpha: 1.000)
        let color4 = UIColor(red: 0.977, green: 0.652, blue: 0.000, alpha: 1.000)
        let color6 = UIColor(red: 0.654, green: 0.700, blue: 0.789, alpha: 0.219)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor().colorWithAlphaComponent(0.86)
        shadow.shadowOffset = CGSizeMake(1.1, 1.1)
        shadow.shadowBlurRadius = 5

        //// Variable Declarations
        let rotationOrange: CGFloat = master * 360 - 90
        let rotationBlue: CGFloat = master * 360
        let rotationBlack: CGFloat = master * 360 - 180
        let rotationGreen: CGFloat = master * 360 - 270

        //// Group


        //// Group 2
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        CGContextBeginTransparencyLayer(context, nil)


        //// Oval 4 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 61.7, 63.3)
        CGContextRotateCTM(context, -rotationOrange * CGFloat(M_PI) / 180)
        CGContextScaleCTM(context, 0.9, 0.9)

        let oval4Rect = CGRectMake(-63, -63, 126, 126)
        let oval4Path = UIBezierPath()
        oval4Path.addArcWithCenter(CGPointMake(oval4Rect.midX, oval4Rect.midY), radius: oval4Rect.width / 2, startAngle: -90 * CGFloat(M_PI)/180, endAngle: 0 * CGFloat(M_PI)/180, clockwise: true)

        color4.setStroke()
        oval4Path.lineWidth = 2.5
        oval4Path.stroke()

        CGContextRestoreGState(context)


        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 61.7, 63.3)
        CGContextRotateCTM(context, -rotationBlack * CGFloat(M_PI) / 180)
        CGContextScaleCTM(context, 0.9, 0.9)

        let oval2Rect = CGRectMake(-63, -63, 126, 126)
        let oval2Path = UIBezierPath()
        oval2Path.addArcWithCenter(CGPointMake(oval2Rect.midX, oval2Rect.midY), radius: oval2Rect.width / 2, startAngle: -90 * CGFloat(M_PI)/180, endAngle: 0 * CGFloat(M_PI)/180, clockwise: true)

        color2.setStroke()
        oval2Path.lineWidth = 2.5
        oval2Path.stroke()

        CGContextRestoreGState(context)


        //// Oval 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 61.7, 63.3)
        CGContextRotateCTM(context, -rotationGreen * CGFloat(M_PI) / 180)
        CGContextScaleCTM(context, 0.9, 0.9)

        let oval3Rect = CGRectMake(-63, -63, 126, 126)
        let oval3Path = UIBezierPath()
        oval3Path.addArcWithCenter(CGPointMake(oval3Rect.midX, oval3Rect.midY), radius: oval3Rect.width / 2, startAngle: -90 * CGFloat(M_PI)/180, endAngle: 0 * CGFloat(M_PI)/180, clockwise: true)

        color.setStroke()
        oval3Path.lineWidth = 2.5
        oval3Path.stroke()

        CGContextRestoreGState(context)


        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 61.7, 63.3)
        CGContextRotateCTM(context, -rotationBlue * CGFloat(M_PI) / 180)
        CGContextScaleCTM(context, 0.9, 0.9)

        let ovalRect = CGRectMake(-63, -63, 126, 126)
        let ovalPath = UIBezierPath()
        ovalPath.addArcWithCenter(CGPointMake(ovalRect.midX, ovalRect.midY), radius: ovalRect.width / 2, startAngle: -90 * CGFloat(M_PI)/180, endAngle: 0 * CGFloat(M_PI)/180, clockwise: true)

        color3.setStroke()
        ovalPath.lineWidth = 2.5
        ovalPath.stroke()

        CGContextRestoreGState(context)


        //// Oval 5 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 61.7, 63.3)
        CGContextScaleCTM(context, 0.85, 0.85)

        let oval5Path = UIBezierPath(ovalInRect: CGRectMake(-63, -63, 126, 126))
        color6.setFill()
        oval5Path.fill()

        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

}
